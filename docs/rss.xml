<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>Huy&apos;s blog</title>
        <link></link>
        <description>Huy&apos;s posts</description>
        <lastBuildDate>Thu, 07 Apr 2022 07:00:12 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Elmstatic</generator>
        <language>en</language>
        <copyright>Copyright: Huy Phung</copyright>
        <item>
            <title><![CDATA[The Pragmatic Programmer Characteristic]]></title>
            <link>/2022-03-21-the-pragmatic-programmer-characteristic</link>
            <guid>/2022-03-21-the-pragmatic-programmer-characteristic</guid>
            <pubDate>Mon, 21 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[I spent 5 years of my life writing Ruby codes and some other frontend codes as well. However, other engineers always could point out the many bad things in my codes (meaningless names, bad structures, etc). One day, a good friend of mine told me to read a book named "The Pragmatic Programmer". The book gives me a compass for my daily work.

What makes a pragmatic programmer?

Early adopter: As a Software engineer, you must have an instinct for technologies and techniques. You keep learning expli...]]></description>
        </item>
        <item>
            <title><![CDATA[Reading Note: Partially Apply Arguments in Elm]]></title>
            <link>/2022-03-22-partial-application-in-elm</link>
            <guid>/2022-03-22-partial-application-in-elm</guid>
            <pubDate>Tue, 22 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[In many OOP programming languages such as Ruby. You have to fully apply the arguments when calling a function.

def sayhello(greet, personname)
  puts "#{greet} #{person_name}"
end

say_hello('Hi', 'Huy Phung') # Hi Huy Phung

In many functional programming languages such as Haskell, or Elm. You can partially apply the arguments when calling a function.

sayHello : String -> String -> String
sayHello greet personName =
  greet ++ " " ++ personName

> hello = sayHello "Hello"
 : String -> String
...]]></description>
        </item>
        <item>
            <title><![CDATA[Some thoughts on writing]]></title>
            <link>/2022-03-23-some-thoughs-on-writing</link>
            <guid>/2022-03-23-some-thoughs-on-writing</guid>
            <pubDate>Wed, 23 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[As a software engineer, I found that writing is an important skill. Besides coding, writing helps us to:

Describe our thinking in words
Reinforce your knowledge and store it in a structured form
Share our knowledge

I am not a good writer. But I want to share the tips I used when writing this blog.

Write it short but follow the main points

Before I write anything, I plan it. For example, I defined the purpose of this post as below:

The importance of this skill for an engineer.
I want to shar...]]></description>
        </item>
        <item>
            <title><![CDATA[Reading Note: Elm module]]></title>
            <link>/2022-03-24-elm-module</link>
            <guid>/2022-03-24-elm-module</guid>
            <pubDate>Thu, 24 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Elm Module

Every Elm file is a module.
Modules organize the code into logical units.
Each module contains one or more constants and functions that it can expose to the other modules.
Elm needs the main module to compile your application into a JavaScript or HTML file for the browser.

A simple main module in Elm:

module Main exposing (main)
import Html exposing (Html, text)

main : Html msg
main =
  text "Hello, Elm"

The main constant name is important but not the module's name. You could cal...]]></description>
        </item>
        <item>
            <title><![CDATA[Reading Note: Virtual DOM in Elm]]></title>
            <link>/2022-03-26-virtual-dom-in-elm</link>
            <guid>/2022-03-26-virtual-dom-in-elm</guid>
            <pubDate>Sat, 26 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Yesterday, I read about the Virtual DOM in Elm. As a backend developer by default, I am curious about this topic and want to learn more about why there is something called Virtual DOM.

What is DOM?

The Document Object Model (DOM) is the data representation of the objects that comprise the structure and content of a document on the web.

DOM is a programming interface for web documents.
DOM representation allows it to be manipulated (structure, style, and content).
The DOM represents the docume...]]></description>
        </item>
        <item>
            <title><![CDATA[Reading Note: Model and Record Data Type in Elm]]></title>
            <link>/2022-03-27-model-and-record-in-elm</link>
            <guid>/2022-03-27-model-and-record-in-elm</guid>
            <pubDate>Sun, 27 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Model

The model is responsible for containing all your application states.
The model in Elm is different from other architectures such as MVC, MVVM, or stuffing data in the DOM via data-* attributes. Those approaches encourage spreading your state across multiple models, making it hard to keep track of where the state is located and how and when the state changes. The Elm Architecture helps you know where your state is located. It is consolidated in one place.
In Elm, the model can be whatever ...]]></description>
        </item>
        <item>
            <title><![CDATA[Reading Note: The Elm Architecture]]></title>
            <link>/2022-03-28-elm-architecture</link>
            <guid>/2022-03-28-elm-architecture</guid>
            <pubDate>Mon, 28 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[One of the things I love about Elm is its architecture. It is simple and powerful. The Elm Architecture gives you a solid way for handling the state of your application.

The basic structure of an Elm application looks like this:

elm-architecture

Model

I already have a blog post related to Elm Model in this post Model and Record in Elm

In short, model contains all of your application states. Typically, a model is a record data type.

View

View is responsible for displaying a model.
The Elm ...]]></description>
        </item>
        <item>
            <title><![CDATA[Reading Note: Nested transactions in Rails]]></title>
            <link>/2022-03-29-nested-transactions-rails</link>
            <guid>/2022-03-29-nested-transactions-rails</guid>
            <pubDate>Tue, 29 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[transaction calls can be nested. By default, this makes all database statements in the nested transaction block become part of the parent transaction. (1)

Example:

User.transaction do
  User.create(username: 'Hisoka')
  User.transaction do
    User.create(username: 'Gon')
    raise ActiveRecord::Rollback
  end
end

Try to write this code in your rails console. You will see that this code creates both "Hisoka" and "Gon" (you will know who they are after you read Hunter Ã— Hunter).

The reason is...]]></description>
        </item>
        <item>
            <title><![CDATA[Reading Note: Pixel and Rem]]></title>
            <link>/2022-03-30-pixel-and-rem</link>
            <guid>/2022-03-30-pixel-and-rem</guid>
            <pubDate>Wed, 30 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[When working with the CSS stuff, I want to understand Pixel and Rem. So, I try to dig deeper into these two.

Em is a more complicated topic (including the media queries). I determine to mention it later. (after I comprehend it)

Pixel

Pixel is an absolute length.

Pixel does not mean the literal screen pixels in the display you are looking at. It's an angular measurement. So, the size of a pixel isn't always the same on different displays.

Pixel is easy to transfer from the design to the web ...]]></description>
        </item>
        <item>
            <title><![CDATA[Rails Reflection Methods]]></title>
            <link>/2022-03-31-rails-reflection-methods</link>
            <guid>/2022-03-31-rails-reflection-methods</guid>
            <pubDate>Thu, 31 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Imagine that you have a file system application to manage contents with a Category model

class Category
...]]></description>
        </item>
        <item>
            <title><![CDATA[Reading Note: Interacting with time in elm]]></title>
            <link>/2022-04-02-interacting-with-time-in-elm</link>
            <guid>/2022-04-02-interacting-with-time-in-elm</guid>
            <pubDate>Sat, 02 Apr 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[There are two ways to interact with time in Elm.

Via the command ("let me know when so much time has elapsed").
Via the subscription ("let me know every time this interval has elapsed").

To understand the command and subscription in Elm I recommend you to read the Elm documentation and this article at first. Moreover, you also have to learn the usages of Process and Task in Elm.

Via a command

A command is a way of telling Elm, "Hey, I want you to do this thing!". So, if you want to send an H...]]></description>
        </item>
        <item>
            <title><![CDATA[Random Moment: Good old friends]]></title>
            <link>/2022-04-03-good-old-friends</link>
            <guid>/2022-04-03-good-old-friends</guid>
            <pubDate>Sun, 03 Apr 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Today, I come to celebrate the wedding of one of my childhood friends. Before, I feel very lazy. However, this guy is one of my best friends, and I could not deny his invitation.

At the party, I met many old friends. We have known each other for about 20 years. They remind me of a lot of great memories. They also remind me of many other friends we know in the past. It is happy to talk with these guys.

I just remembered the great reminiscences with the groom. We used to ride our bicycles for 1-...]]></description>
        </item>
        <item>
            <title><![CDATA[Lazy Enumerator in Ruby]]></title>
            <link>/2022-04-04-lazy-enumerator-ruby</link>
            <guid>/2022-04-04-lazy-enumerator-ruby</guid>
            <pubDate>Mon, 04 Apr 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Enumerator::Lazy allows constructing chains of operations without evaluating them immediately, and evaluating values on an as-needed basis.

It redefines most of the Enumerable methods so that they just construct another lazy enumerator.

What is an enumerator?

Each time we use enumerable methods like map, collect, select, we create an enumerator class. The enumerable objects can be chained.

[1, 2, 3].map { ... }.select { ... }

Normal Enumerator

Let's say, we have to fetch 10 Twitter users' ...]]></description>
        </item>
        <item>
            <title><![CDATA[Learning Note: Problem Solving Skills for SWE - P1]]></title>
            <link>/2022-04-05-problem-solving-skills-p1</link>
            <guid>/2022-04-05-problem-solving-skills-p1</guid>
            <pubDate>Tue, 05 Apr 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[A quick note of Grokking Techtalk #44 - Problem-Solving Skills for SWE

This note is not cover the whole tech talk content. It is just a quick note to highlight the important points. It is useful when you already listened to the tech talk.

Who has the problem?

The stakeholders:

Clients are the people who buy your product, or solution.
Users are the people who use your product directly.

What is the problem?

A problem contains two components:

The expected reality of the stakeholders.
The per...]]></description>
        </item>
        <item>
            <title><![CDATA[Reading Note: Nominal type and Structural type]]></title>
            <link>/2022-04-06-nominal-type-and-structural-type</link>
            <guid>/2022-04-06-nominal-type-and-structural-type</guid>
            <pubDate>Wed, 06 Apr 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Today I learn that an important attribute of every type system is whether they are structural or nominal.

A static type checker uses either the names or the structure of the types to compare them against other types. Checking against the name is nominal typing and checking against the structure is structural typing.

Nominal Type

In a nominal, or nominative, or name-based type system, two types are deemed to be the same if they have the same name.

Subtyping: type T1 is deemed to be a subtype ...]]></description>
        </item>
        <item>
            <title><![CDATA[Reading Note: PostgreSQL views and materialized views]]></title>
            <link>/2022-04-07-postgres-view-and-materialized-view</link>
            <guid>/2022-04-07-postgres-view-and-materialized-view</guid>
            <pubDate>Thu, 07 Apr 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[A view is a database object that is of a stored query.

A view is defined based on one or more tables which are known as base tables. When you create a view, you create a query and assign a name to the query. It is useful for wrapping a commonly used complex query.

The regular views do not store any data except the materialized views.

Materialized Views in PostgreSQL

The regular views are the virtual tables that represent the data of the underlying tables. The regular views do not store any d...]]></description>
        </item>
    </channel>
</rss>
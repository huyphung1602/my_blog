<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>Huy&apos;s blog</title>
        <link></link>
        <description>Huy&apos;s posts</description>
        <lastBuildDate>Thu, 31 Mar 2022 07:03:55 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Elmstatic</generator>
        <language>en</language>
        <copyright>Copyright: Huy Phung</copyright>
        <item>
            <title><![CDATA[The Pragmatic Programmer Characteristic]]></title>
            <link>/2022-03-21-the-pragmatic-programmer-characteristic</link>
            <guid>/2022-03-21-the-pragmatic-programmer-characteristic</guid>
            <pubDate>Mon, 21 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[I spent 5 years of my life writing Ruby codes and some other frontend codes as well. However, other engineers always could point out the many bad things in my codes (meaningless names, bad structures, etc). One day, a good friend of mine told me to read a book named "The Pragmatic Programmer". The book gives me a compass for my daily work.

What makes a pragmatic programmer?

Early adopter: As a Software engineer, you must have an instinct for technologies and techniques. You keep learning expli...]]></description>
        </item>
        <item>
            <title><![CDATA[Reading Note: Partially Apply Arguments in Elm]]></title>
            <link>/2022-03-22-partial-application-in-elm</link>
            <guid>/2022-03-22-partial-application-in-elm</guid>
            <pubDate>Tue, 22 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[In many OOP programming languages such as Ruby. You have to fully apply the arguments when calling a function.

def sayhello(greet, personname)
  puts "#{greet} #{person_name}"
end

say_hello('Hi', 'Huy Phung') # Hi Huy Phung

In many functional programming languages such as Haskell, or Elm. You can partially apply the arguments when calling a function.

sayHello : String -> String -> String
sayHello greet personName =
  greet ++ " " ++ personName

> hello = sayHello "Hello"
 : String -> String
...]]></description>
        </item>
        <item>
            <title><![CDATA[Some thoughts on writing]]></title>
            <link>/2022-03-23-some-thoughs-on-writing</link>
            <guid>/2022-03-23-some-thoughs-on-writing</guid>
            <pubDate>Wed, 23 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[As a software engineer, I found that writing is an important skill. Besides coding, writing helps us to:

Describe our thinking in words
Reinforce your knowledge and store it in a structured form
Share our knowledge

I am not a good writer. But I want to share the tips I used when writing this blog.

Write it short but follow the main points

Before I write anything, I plan it. For example, I defined the purpose of this post as below:

The importance of this skill for an engineer.
I want to shar...]]></description>
        </item>
        <item>
            <title><![CDATA[Reading Note: Elm module]]></title>
            <link>/2022-03-24-elm-module</link>
            <guid>/2022-03-24-elm-module</guid>
            <pubDate>Thu, 24 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Elm Module

Every Elm file is a module.
Modules organize the code into logical units.
Each module contains one or more constants and functions that it can expose to the other modules.
Elm needs the main module to compile your application into a JavaScript or HTML file for the browser.

A simple main module in Elm:

module Main exposing (main)
import Html exposing (Html, text)

main : Html msg
main =
  text "Hello, Elm"

The main constant name is important but not the module's name. You could cal...]]></description>
        </item>
        <item>
            <title><![CDATA[Reading Note: Virtual DOM in Elm]]></title>
            <link>/2022-03-26-virtual-dom-in-elm</link>
            <guid>/2022-03-26-virtual-dom-in-elm</guid>
            <pubDate>Sat, 26 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Yesterday, I read about the Virtual DOM in Elm. As a backend developer by default, I am curious about this topic and want to learn more about why there is something called Virtual DOM.

What is DOM?

The Document Object Model (DOM) is the data representation of the objects that comprise the structure and content of a document on the web.

DOM is a programming interface for web documents.
DOM representation allows it to be manipulated (structure, style, and content).
The DOM represents the docume...]]></description>
        </item>
        <item>
            <title><![CDATA[Reading Note: Model and Record Data Type in Elm]]></title>
            <link>/2022-03-27-model-and-record-in-elm</link>
            <guid>/2022-03-27-model-and-record-in-elm</guid>
            <pubDate>Sun, 27 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Model

The model is responsible for containing all your application states.
The model in Elm is different from other architectures such as MVC, MVVM, or stuffing data in the DOM via data-* attributes. Those approaches encourage spreading your state across multiple models, making it hard to keep track of where the state is located and how and when the state changes. The Elm Architecture helps you know where your state is located. It is consolidated in one place.
In Elm, the model can be whatever ...]]></description>
        </item>
        <item>
            <title><![CDATA[Reading Note: The Elm Architecture]]></title>
            <link>/2022-03-28-elm-architecture</link>
            <guid>/2022-03-28-elm-architecture</guid>
            <pubDate>Mon, 28 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[One of the things I love about Elm is its architecture. It is simple and powerful. The Elm Architecture gives you a solid way for handling the state of your application.

The basic structure of an Elm application looks like this:

elm-architecture

Model

I already have a blog post related to Elm Model in this post Model and Record in Elm

In short, model contains all of your application states. Typically, a model is a record data type.

View

View is responsible for displaying a model.
The Elm ...]]></description>
        </item>
        <item>
            <title><![CDATA[Reading Note: Nested transactions in Rails]]></title>
            <link>/2022-03-29-nested-transactions-rails</link>
            <guid>/2022-03-29-nested-transactions-rails</guid>
            <pubDate>Tue, 29 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[transaction calls can be nested. By default, this makes all database statements in the nested transaction block become part of the parent transaction. (1)

Example:

User.transaction do
  User.create(username: 'Hisoka')
  User.transaction do
    User.create(username: 'Gon')
    raise ActiveRecord::Rollback
  end
end

Try to write this code in your rails console. You will see that this code creates both "Hisoka" and "Gon" (you will know who they are after you read Hunter Ã— Hunter).

The reason is...]]></description>
        </item>
        <item>
            <title><![CDATA[Reading Note: Pixel and Rem]]></title>
            <link>/2022-03-30-pixel-and-rem</link>
            <guid>/2022-03-30-pixel-and-rem</guid>
            <pubDate>Wed, 30 Mar 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[When working with the CSS stuff, I want to understand Pixel and Rem. So, I try to dig deeper into these two.

Em is a more complicated topic (including the media queries). I determine to mention it later. (after I comprehend it)

Pixel

Pixel is an absolute length.

Pixel does not mean the literal screen pixels in the display you are looking at. It's an angular measurement. So, the size of a pixel isn't always the same on different displays.

Pixel is easy to transfer from the design to the web ...]]></description>
        </item>
    </channel>
</rss>